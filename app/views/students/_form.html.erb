    <div class="panel panel-info">
      <div class="panel-heading">

      </div>
      <div class="panel-body">

       <div class="well">

        <%= form_with model: @student, local: true do |form| %>
        <% if @student.errors.any? %>
        <div id="error_explanation">
         <h2>
          <%= pluralize(@student.errors.count, "error") %> prohibited
          this student from being saved:
        </h2>
        <ul>
         <% @student.errors.full_messages.each do |msg| %>
         <li><%= msg %></li>
         <% end %>
       </ul>
     </div>
     <% end %>
     <table>

      <p>

        <%=form.label :profile_pic, :class => 'control-label col-lg-2' %><br>

        <%= form.file_field :profile_pic, :class => 'form-control' %>
      </p>



      <p>

       <%= form.label :first_name, :class => 'control-label col-lg-2' %><br>
       <%= form.text_field :first_name, :class => 'form-control'  %>

     </p>


   <p>
     <%= form.label :last_name, :class => 'control-label col-lg-2' %><br>
     <%= form.text_field :last_name, :class => 'form-control'  %>
   </p>
   <p>
    <%= form.label :father_name, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :father_name, :class => 'form-control'  %>
  </p>
  <p>
    <%= form.label :contact, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :contact, :class => 'form-control'  %>
  </p>
  <p>
    <%= form.label :emergency_contact, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :emergency_contact, :class => 'form-control'  %>
  </p>
  <p>
    <%= form.label :email, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :email, :class => 'form-control'  %>
  </p>
  <p>
    <%= form.label :address, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :address, :class => 'form-control', id: "autocomplete", placeholder: "Enter your address", 
             onFocus: "geolocate()"   %>
  </p>
  <p>
    <%= form.label :college, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :college, :class => 'form-control'  %>
  </p>
  <p>
    <%= form.label :date_of_birth, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :date_of_birth, :class => 'form-control'  %>
  </p>
  <p>
    <%= form.label :gender, :class => 'control-label col-lg-2' %><br>
    <%= form.text_field :gender, :class => 'form-control'  %>
  </p>
  <div class="col-md-5" style="margin-left: 25%; margin-top: 5%;">
   <p>

    <%= form.submit 'submit', :class => 'btn btn-success btn btn-block' %>

  </p>
</div>

<div class="col-md-5" style="margin-left: %">
  <%= link_to 'Back', students_path, :class => 'btn btn-info ' %>
</div>
</table>
<% end %>
</div>
</div>
</div>
</div>

<script>

      var placeSearch, autocomplete;
      var componentForm = {
        street_number: 'short_name',
        route: 'long_name',
        locality: 'long_name',
        administrative_area_level_1: 'short_name',
        country: 'long_name',
        postal_code: 'short_name'
      };

      function initAutocomplete() {
        // Create the autocomplete object, restricting the search to geographical
        // location types.
        autocomplete = new google.maps.places.Autocomplete(
            /** @type {!HTMLInputElement} */(document.getElementById('autocomplete')),
            {types: ['geocode']});

        // When the user selects an address from the dropdown, populate the address
        // fields in the form.
        autocomplete.addListener('place_changed', fillInAddress);
      }

      function fillInAddress() {
        // Get the place details from the autocomplete object.
        var place = autocomplete.getPlace();

        for (var component in componentForm) {
          document.getElementById(component).value = '';
          document.getElementById(component).disabled = false;
        }

        // Get each component of the address from the place details
        // and fill the corresponding field on the form.
        for (var i = 0; i < place.address_components.length; i++) {
          var addressType = place.address_components[i].types[0];
          if (componentForm[addressType]) {
            var val = place.address_components[i][componentForm[addressType]];
            document.getElementById(addressType).value = val;
          }
        }
      }

      // Bias the autocomplete object to the user's geographical location,
      // as supplied by the browser's 'navigator.geolocation' object.
      function geolocate() {
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(function(position) {
            var geolocation = {
              lat: position.coords.latitude,
              lng: position.coords.longitude
            };
            var circle = new google.maps.Circle({
              center: geolocation,
              radius: position.coords.accuracy
            });
            autocomplete.setBounds(circle.getBounds());
          });
        }
      }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAN1Y9tstSw1JLgZUHbdL5qL6mRJiY8brw&libraries=places&callback=initAutocomplete"
        async defer></script>
